plugins{
    // https://github.com/mfuerstenau/gradle-buildconfig-plugin
    id 'de.fuerstenau.buildconfig' version '1.1.8'
}

group 'com.github.sauterl'
version 'DEV-1'



apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.3'


    compile group: 'com.j2html', name: 'j2html', version: '0.88'
    // https://mvnrepository.com/artifact/commons-lang/commons-lang
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'

    compile 'com.intellij:annotations:12.0'

    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.10.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.0'

    compile group: 'com.atlassian.commonmark', name: 'commonmark', version: '0.11.0'

    compile group: 'org.mapdb', name: 'mapdb', version:'3.0.5'

    compile 'com.aetrion.flickr:flickrapi:1.1'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
        resources {
            srcDir 'src/test/resources'
        }
    }
}

jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest{
        attributes 'Main-Class': 'SOMECLASS'
    }
}

buildConfig{
    clsName='ApiKeyStore'
    packageName='com.github.sauterl.demeter'
    buildConfigField 'String', 'FLICKR_PUBLIC', getApiKeyPublic('flickr')
    buildConfigField 'String', 'FLICKR_PRIVATE', getApiKeyPrivate('flickr')
}

/**
 * From:
 * https://github.com/nostra13/Android-Universal-Image-Loader/issues/1086
 */
tasks.withType(Javadoc) {
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
    options.addStringOption('Xdoclint:none', '-quiet')
}



def getApiKeyPublic(String api){
    Properties props = new Properties()
    props.load(new FileInputStream("api-auth.properties"))
    return props.getProperty('api.$api.key.public')
}

def getApiKeyPrivate(String api){
    Properties props = new Properties()
    props.load(new FileInputStream("api-auth.properties"))
    return props.getProperty('api.$api.key.private')
}

//https://stackoverflow.com/questions/20104323/generate-a-java-class-using-gradle-for-java-plugin
task generateSources {
    /*
    outputDir = file("$buildDir/../src/main/java/com/github/sauterl/demeter")
    outputs.dir outputDir
    doFirst {
        outputDir.exists() || outputDir.mkdirs()

        String privateKey = getApiKeyPrivate("flickr")
        String publicKey = getApiKeyPublic("flickr")

        String API_PRIVATE = "public static final String FLICKR_PRIVATE = \"$privateKey\";\n"
        String API_PUBLIC = "public static final String FLICKR_PUBLIC = \"$publicKey\";\n"

        /*
        try {
            API_CLIENT_ID = "public static final String API_CLIENT_ID = \"" + apiClientId + "\";\n"
            API_CLIENT_SECRET = "public static final String API_CLIENT_SECRET = \"" + apiClientSecret + "\";\n"
        } catch (Exception e) {
            println "gradle.properties not set with apiClientId and/or apiClientSecret. API calls will not work.";
        }*/

     /*   new File(outputDir, "ApiKeyStore.java").write("package com.github.sauterl.demeter;\n\npublic class ApiKeyStore {\n" + "    " + API_CLIENT_ID + "    " + API_CLIENT_SECRET + "}")*/
    //}
}

compileJava.source generateSources.outputs.files, sourceSets.main.java